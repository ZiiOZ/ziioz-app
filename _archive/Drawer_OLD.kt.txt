package com.ziioz.app.components

import androidx.compose.animation.core.animateFloatAsState
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.gestures.detectHorizontalDragGestures
import androidx.compose.foundation.interaction.MutableInteractionSource
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.HorizontalDivider
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.input.pointer.pointerInput
import androidx.compose.ui.unit.Dp
import androidx.compose.ui.unit.dp
import androidx.compose.ui.zIndex
import kotlin.math.abs

/* ------------------------- Edge hotspots ------------------------- */

@Composable
fun DrawerEdgeHotspot(
    modifier: Modifier = Modifier,
    onOpen: () -> Unit
) {
    EdgeHandle(
        modifier = modifier
            .fillMaxHeight()
            .width(20.dp),
        openDirection = +1,
        onOpen = onOpen
    )
}

@Composable
fun DrawerEdgeHotspotStart(
    modifier: Modifier = Modifier,
    onOpen: () -> Unit
) {
    EdgeHandle(
        modifier = modifier
            .fillMaxHeight()
            .width(20.dp),
        openDirection = -1,
        onOpen = onOpen
    )
}

@Composable
private fun EdgeHandle(
    modifier: Modifier,
    openDirection: Int,   // -1 = from left, +1 = from right
    onOpen: () -> Unit
) {
    var drag by remember { mutableStateOf(0f) }

    Box(
        modifier = modifier.pointerInput(Unit) {
            detectHorizontalDragGestures(
                onDragEnd = {
                    if (abs(drag) > 12f) onOpen()
                    drag = 0f
                }
            ) { _, dx ->
                if (openDirection < 0 && dx > 0f) drag += dx
                if (openDirection > 0 && dx < 0f) drag += -dx
            }
        },
        contentAlignment = Alignment.Center
    ) {
        Column(modifier = Modifier.padding(4.dp), horizontalAlignment = Alignment.CenterHorizontally) {
            Dot(); Spacer(Modifier.height(6.dp)); Dot()
        }
    }
}

@Composable
private fun Dot() {
    Box(
        modifier = Modifier
            .size(6.dp)
            .clip(CircleShape)
            .background(MaterialTheme.colorScheme.onSurface.copy(alpha = 0.45f))
    )
}

/* ------------------------- Settings drawer (right) ------------------------- */

@Composable
fun SettingsDrawer(
    open: Boolean,
    onClose: () -> Unit
) {
    SlideOver(
        open = open,
        side = SlideSide.RIGHT,
        width = 320.dp,
        onClose = onClose
    ) {
        Column(Modifier.fillMaxHeight().padding(16.dp)) {
            Text("Settings", style = MaterialTheme.typography.titleLarge)
            Spacer(Modifier.height(16.dp))

            DrawerItem("Legal & Privacy")
            DrawerItem("Help & Support")
            DrawerItem("Developer: Commercial Interactive")

            Spacer(Modifier.height(24.dp))
            Text(
                "v0.1.0·dev • COMMERCIAL INTERACTIVE",
                style = MaterialTheme.typography.labelSmall,
                color = MaterialTheme.colorScheme.onSurfaceVariant
            )
            Spacer(Modifier.height(12.dp))
            Text(
                "Close",
                color = MaterialTheme.colorScheme.primary,
                style = MaterialTheme.typography.labelLarge,
                modifier = Modifier
                    .clip(RoundedCornerShape(8.dp))
                    .padding(4.dp)
                    .clickableNoRipple { onClose() }
            )
        }
    }
}

/* ------------------------- Friends drawer (left) ------------------------- */

data class Friend(val name: String)

@Composable
fun FriendsDrawer(
    open: Boolean,
    onClose: () -> Unit,
    onFriendTap: (Friend) -> Unit
) {
    SlideOver(
        open = open,
        side = SlideSide.LEFT,
        width = 320.dp,
        onClose = onClose
    ) {
        Column(Modifier.fillMaxHeight()) {
            Column(Modifier.padding(16.dp)) {
                Text("Privacy & Sharing", style = MaterialTheme.typography.titleLarge)
                Spacer(Modifier.height(12.dp))

                Row(horizontalArrangement = Arrangement.spacedBy(8.dp)) {
                    TinyPill("Public", selected = true)
                    TinyPill("Friends", selected = false)
                    TinyPill("Private", selected = false)
                }

                Spacer(Modifier.height(16.dp))
                Row(horizontalArrangement = Arrangement.spacedBy(8.dp)) {
                    TinyPill("Friends", true)
                    TinyPill("Business", false)
                    TinyPill("Trending", false)
                    TinyPill("Suggest", false)
                    TinyPill("Podcast", false)
                }
                Spacer(Modifier.height(16.dp))
            }

            HorizontalDivider()

            val demo = remember {
                listOf("Emma","Oceanco","Ashley","Robert","Ava","Mia").map { Friend(it) }
            }

            LazyColumn(
                modifier = Modifier.fillMaxSize(),
                contentPadding = PaddingValues(12.dp),
                verticalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                items(demo) { friend ->
                    FriendRow(friend = friend, onTap = { onFriendTap(friend) })
                }
            }
        }
    }
}

@Composable
private fun FriendRow(friend: Friend, onTap: () -> Unit) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .clip(RoundedCornerShape(14.dp))
            .background(MaterialTheme.colorScheme.surfaceVariant.copy(alpha = 0.25f))
            .clickableNoRipple { onTap() }
            .padding(horizontal = 12.dp, vertical = 10.dp),
        verticalAlignment = Alignment.CenterVertically
    ) {
        Box(Modifier.size(36.dp), contentAlignment = Alignment.Center) {
            Text(friend.name.first().toString(), style = MaterialTheme.typography.labelLarge)
        }
        Spacer(Modifier.width(12.dp))
        Text(friend.name, style = MaterialTheme.typography.titleMedium)
    }
}

/* ------------------------- SlideOver primitive ------------------------- */

private enum class SlideSide { LEFT, RIGHT }

@Composable
private fun SlideOver(
    open: Boolean,
    side: SlideSide,
    width: Dp,
    onClose: () -> Unit,
    content: @Composable ColumnScope.() -> Unit
) {
    val fraction by animateFloatAsState(if (open) 1f else 0f, label = "drawerFrac")

    // Scrim
    if (fraction > 0f) {
        Box(
            Modifier
                .fillMaxSize()
                .background(Color.Black.copy(alpha = 0.2f * fraction))
                .clickableNoRipple { onClose() }
                .zIndex(1f)
        )
    }

    // Panel (overlayed and aligned inside a Box)
    Box(Modifier.fillMaxSize().zIndex(2f)) {
        val offsetX = when (side) {
            SlideSide.LEFT  -> -((1f - fraction) * width.value).dp
            SlideSide.RIGHT ->  ((1f - fraction) * width.value).dp
        }

        Surface(
            shadowElevation = 8.dp,
            shape = RoundedCornerShape(
                topStart = if (side == SlideSide.RIGHT) 16.dp else 0.dp,
                topEnd   = if (side == SlideSide.LEFT) 16.dp else 0.dp,
                bottomStart = if (side == SlideSide.RIGHT) 16.dp else 0.dp,
                bottomEnd   = if (side == SlideSide.LEFT) 16.dp else 0.dp
            ),
            modifier = Modifier
                .align(if (side == SlideSide.LEFT) Alignment.CenterStart else Alignment.CenterEnd)
                .offset(x = offsetX)
                .fillMaxHeight()
                .width(width)
        ) {
            Column(content = content)
        }
    }
}

/* ------------------------- tiny helpers ------------------------- */

@Composable
private fun TinyPill(label: String, selected: Boolean) {
    val bg = if (selected) MaterialTheme.colorScheme.primary.copy(alpha = 0.15f)
    else MaterialTheme.colorScheme.surfaceVariant.copy(alpha = 0.6f)
    val fg = if (selected) MaterialTheme.colorScheme.primary
    else MaterialTheme.colorScheme.onSurfaceVariant

    Surface(color = bg, shape = RoundedCornerShape(999.dp)) {
        Text(
            text = label,
            color = fg,
            style = MaterialTheme.typography.labelMedium,
            modifier = Modifier.padding(horizontal = 10.dp, vertical = 6.dp)
        )
    }
}

@Composable
private fun DrawerItem(text: String, onClick: () -> Unit = {}) {
    Surface(
        color = MaterialTheme.colorScheme.primary.copy(alpha = 0.08f),
        shape = RoundedCornerShape(14.dp),
        modifier = Modifier
            .fillMaxWidth()
            .clickableNoRipple { onClick() }
    ) {
        Text(
            text,
            style = MaterialTheme.typography.titleSmall,
            modifier = Modifier.padding(horizontal = 16.dp, vertical = 14.dp)
        )
    }
    Spacer(Modifier.height(12.dp))
}

@Composable
private fun Modifier.clickableNoRipple(onClick: () -> Unit): Modifier {
    val interaction = remember { MutableInteractionSource() }
    return this.then(
        Modifier.clickable(interactionSource = interaction, indication = null) { onClick() }
    )
}
